<?php

/**
 * @file
 * Preprocess functions for owen.
 */

use Drupal\Component\Utility\Crypt;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Core\Entity;

/**
 * Prepares variables for the html.html.twig template.
 */
function owen_preprocess_html(&$variables) {
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    // If the database is not yet available, set default values for these
    // variables.
    $variables['is_front'] = FALSE;
  }

  // Add classes for node id and menu section.
  if (!$variables['is_front']) {
    $path = \Drupal::service('path.current')->getPath();
    $alias = \Drupal::service('path_alias.manager')->getAliasByPath($path);
    $alias = trim($alias, '/');
    if (!empty($alias)) {
      list($section,) = explode('/', $alias, 2);
      if (!empty($section)) {
        $variables['attributes']['class'][] = 'section-' . $section;
      }
    }
    if ($node = \Drupal::request()->attributes->get('node')) {
      $variables['attributes']['class'][] = 'node-' . $node->id();
    }
  }

  // Add cachability metadata.
  $theme_name = \Drupal::theme()->getActiveTheme()->getName();
  $theme_settings = \Drupal::config($theme_name . '.settings');
  CacheableMetadata::createFromRenderArray($variables)
    ->addCacheableDependency($theme_settings)
    ->applyTo($variables);
  // Union all theme setting variables to the html.html.twig template.
  $variables += $theme_settings->getOriginal();

}

/**
 * Implements hook_preprocess_page() for the page.html.twig template.
 */
//function owen_preprocess_page(&$variables) {
//}

/**
 * Implements template_preprocess_block().
 */
//function owen_preprocess_block(&$variables) {
// uncomment if we need to use png instead of an svg for the site logo
//  switch ($variables['base_plugin_id']) {
  //  case 'system_branding_block':
    //  $variables['site_logo'] = '';
      //if ($variables['content']['site_logo']['#access'] && $variables['content']['site_logo']['#uri']) {
        //$variables['site_logo'] = str_replace('.svg', '.png', $variables['content']['site_logo']['#uri']);
      //}
     // break;

  //}
//}

/**
 * Implements hook_preprocess_node() for the node.html.twig template.
 */
function owen_preprocess_node(&$variables) {
  $node = $variables['elements']['#node'];
  if ($node->hasField('field_event_date') && !$node->field_event_date->isEmpty()) {
    $datefield = $node->get('field_event_date');
    $variables['startdate'] = $datefield->value; //returns timestamp
    $variables['enddate'] = $datefield->end_value; //returns timestamp
  }
}

/**
 * Implements hook_preprocess_field() for the field.html.twig template.
 */
function owen_preprocess_field(&$variables, $hook) {
  // Make additional variables available to the template.
  $variables['bundle'] = $variables['element']['#bundle'];
}

/**
 * Implements hook_preprocess_container().
 * Solution to accessibility issue where multiple forms on a single node
 * get the same ID
 * https://www.drupal.org/project/drupal/issues/1852090#comment-13115760
 */
function owen_preprocess_container(&$variables) {
  if (isset($variables['element']['#id'])) {
    $id = $variables['element']['#id'];
    if (in_array($id, ['edit-actions'])) {
      $id .= '--' . Crypt::randomBytesBase64(8);
    }
    $variables['element']['#id'] = $id;
    $variables['attributes']['id'] = $id;
  }
}

/**
 * Implements hook_preprocess_views_view_table() for views-view-table.twig template.
 * Create data labels for tbody data cells to assist in responsive styling
 */
function owen_preprocess_views_view_table(&$variables) {
  foreach ($variables['rows'] as $row_id => $row) {
    foreach ($row['columns'] as $column_id => $column) {
      $variables['rows'][$row_id]['columns'][$column_id]['label'] = $variables['header'][$column_id]['content'];
    }
  }
}

function owen_preprocess_views_view(&$variables) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];
  if ($view->id() == 'speaker_series') {
    $variables['rows'][0]['#rows'][0]['#view_mode'] = 'speaker_series_featured';
  }
}

/**
 * Implements hook_preprocess_breadcrumb() for the breadcrumb.html.twig template.
 */
function owen_preprocess_breadcrumb(&$variables) {
  // Remove 'Home' from breadcrumb trail if it's the only breadcrumb.
  if (count($variables['breadcrumb']) == 1) {
    array_shift($variables['breadcrumb']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function owen_theme_suggestions_paragraph_alter(&$suggestions, $variables) {
  $paragraph = $variables['elements']['#paragraph'];
  $parent = $paragraph->getParentEntity();
  if ($parent) {
    $suggestions[] = 'paragraph__' . $parent->bundle() . '__' .  $paragraph->bundle();
  }
}

function owen_theme_suggestions_user_alter(&$suggestions, $variables) {
  // Define the view mode.
  $mode = $variables['elements']['#view_mode'];

  // Create a theme hook suggestion which has the view mode name in it.
  $suggestions[] = 'user__' . $mode;
}

/**
 * @param array $suggestions
 * @param array $variables
 * @param $hook
 */
function owen_theme_suggestions_fieldset_alter(array &$suggestions, array $variables, $hook)
{
  if (isset($variables['element']['#id'])) {
    $id = str_replace("-", "_", $variables['element']['#id']);
    $suggestions[] = $hook . '__' . $id;
  }
}

function owen_preprocess_media(&$variables) {
  $variables['media'] = $variables['elements']['#media'];
}

